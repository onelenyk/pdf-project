import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import java.util.Properties

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

// Define variables for project configurations
val projectGroup = "dev.onelenyk"
val mainAppClassName = "$projectGroup.pdfproject.AppKt"

// Read properties file
val versionProperties =
    Properties().apply {
        load(file("version.properties").inputStream())
    }

val projectVersion = versionProperties["version"] as String
plugins {
    id("org.jetbrains.kotlin.jvm") version "1.8.22"
    id("com.github.johnrengelman.shadow") version "7.0.0" // Shadow plugin for creating a fat JAR
    id("org.jlleitschuh.gradle.ktlint") version "12.1.0"
    id("org.jetbrains.dokka") version "1.9.10"
    `maven-publish` // Required for publishing the library
    application // Apply the application plugin to add support for building a CLI application in Java.
}

group = projectGroup
version = projectVersion

repositories {
    mavenCentral()
    maven(url = "https://jitpack.io")
}

dependencies {

    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:30.1.1-jre")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")

    // cli library
    implementation("info.picocli:picocli:4.6.2")

    implementation("dev.onelenyk:gitignore-parser:v0.1.6")

    implementation("com.itextpdf:itext7-core:7.1.16")
    implementation("com.itextpdf:html2pdf:3.0.3")
}

application {
    // Define the main class for the application.
    mainClass.set(mainAppClassName)
}

tasks.shadowJar {
    archiveClassifier.set("")
    manifest {
        attributes["Main-Class"] = mainAppClassName
    }
}

tasks.withType<Jar> {
    manifest {
        attributes["Main-Class"] = mainAppClassName
        attributes["Implementation-Title"] = project.name
        attributes["Implementation-Version"] = project.version
    }
    archiveFileName.set("pdfproject.jar")
}

// dokka

tasks.register<Jar>("dokkaHtmlJar") {
    dependsOn(tasks.dokkaHtml)
    from(tasks.dokkaHtml.flatMap { it.outputDirectory })
    archiveClassifier.set("javadoc")
}

tasks.register<Jar>("dokkaJavadocJar") {
    dependsOn(tasks.dokkaJavadoc)
    from(tasks.dokkaJavadoc.flatMap { it.outputDirectory })
    archiveClassifier.set("javadoc")
}


// Custom tasks to group dependencies
tasks.register("prepareForPublication") {
    dependsOn("dokkaJavadocJar", "shadowJar")
}

tasks.register("prepareDistribution") {
    dependsOn("prepareForPublication", "jar")
}

tasks.register("setupScripts") {
    dependsOn("prepareForPublication", "startShadowScripts")
}

// Ensure proper dependencies
val dependentTasks = listOf("distZip", "distTar", "startScripts", "shadowDistZip", "shadowDistTar", "startShadowScripts")

dependentTasks.forEach { taskName ->
    tasks.named(taskName) {
        dependsOn(tasks.named("prepareForPublication"))
    }
}

// Configure publishing
publishing {
    publications {
        create<MavenPublication>("mavenJava") {
            from(components["java"])
            artifact(tasks["dokkaJavadocJar"])
        }
    }
}

tasks.named("generateMetadataFileForMavenJavaPublication") {
    mustRunAfter(tasks.named("dokkaJavadocJar"))
}

tasks.named("startShadowScripts") {
    mustRunAfter(tasks.named("jar"))
}